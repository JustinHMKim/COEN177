# Name: Justin Kim

# Date: 2/26/19 Tuesday labs

# Title: Lab8 â€“ Notes


1. FIFO utilised a for loop and a seperate counter dedicated to tracking which entry in the cache array was next to be replaced. 

2. Second Chance was implemented similarly to FIFO, with the main difference being the inclusion of a reference bit associated with each page number. This added a need to adjust the reference bit in place of replacing the entries in certain cases. Once again, a seperate counter for tracking which entry to be replaced was necessary. 

3. LRU like second chance added a seperate value in addition to the page entry, here being the time since the page had been called. For each time a page is called, every page newer than it has its time since last call incremented up while the called page has its time reset to represent it being the newest entry once again. Visually speaking, it would be like taking an entry, putting it at the top, and thus putting everything between the top and the entry's old position down by one. Entries older than the called page are not affected. If there is a page fault, all entries have their time incremented up and the new addition is set to the newest. 



All three algorithms were tested with cache sizes 10, 50, 100, 250, and 500 against a randomly generated list of 10,000 integers. The results are below

                  10  |  50  |  100  |  250  |  500
				______|______|_______|_______|___________________
FIFO: 	        |9898 |9490  |9000   |7517   |5191
Second Chance:  |9899 |9479  |9011   |7560   |5179
LRU:            |9898 |9485  |9016   |7519   |5155  

No significant difference could be observed in hit rates between the three algorithms, with difference being limited to single or sub-one percents. In terms of hit rates, all three algorithms perform similarly enough to not warrant any one being deemed 'the best' or 'the worst.'